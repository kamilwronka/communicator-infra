name: "Infra - cluster"

env:
  KUBE_CONFIG_PATH: "~/.kube/config"
  KUBECONFIG: ${{ secrets.KUBECONFIG }}

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - master
    paths:
      - cluster/**
  pull_request:
    branches:
      - master
    paths:
      - cluster/**

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform
    environment: cluster
    steps:
      - name: Auth with Kubernetes cluster
        run: echo "$KUBECONFIG" | base64 -d > $KUBE_CONFIG_PATH
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ./cluster
        shell: bash
      - name: Terraform plan
        id: plan
        run: terraform plan -input=false -no-color -out tf.plan
        working-directory: ./cluster
        shell: bash
      - name: Terraform show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: ./cluster
        shell: bash
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ inputs.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ./cluster
        shell: bash
